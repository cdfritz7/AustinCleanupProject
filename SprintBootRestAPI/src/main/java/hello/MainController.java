package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/austinCleanupAPI") // This means URL's start with /demo (after Application path)
public class MainController {

	/*
	------------------------------------------------------------
	User Repository Interactions
	------------------------------------------------------------
	 */

	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@PostMapping(path="/addUser") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email
			, @RequestParam String username
			, @RequestParam String password) {

		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		n.setUsername(username);
		n.setPassword(password);
		userRepository.save(n);
		return "User Saved";
	}

	@PostMapping("/deleteUserById")
	public @ResponseBody String deleteUser(@RequestParam String id){
		userRepository.deleteById(Integer.parseInt(id));
		return "User Deleted";
	}
	
	@GetMapping(path="/allUsers")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path="/userById")
	public @ResponseBody Optional<User> getUserById(@RequestParam String id){
		//returns info about an individual user by id
		return userRepository.findById(Integer.parseInt(id));
	}


	/*
	------------------------------------------------------------
	Event Repository Interactions
	------------------------------------------------------------
	 */

	@Autowired //get the bean called eventRepository, we will use it to handle event data
	private EventRepository eventRepository;

	@PostMapping("/addEvent")
	public @ResponseBody String addEvent(@RequestParam String name,
										 @RequestParam String address,
										 @RequestParam String latitude,
										 @RequestParam String longitude,
										 @RequestParam String description){
		Event n = new Event();
		n.setName(name);
		n.setAddress(address);
		n.setLatitude(Double.parseDouble(latitude));
		n.setLongitude(Double.parseDouble(longitude));
		n.setDescription(description);
		eventRepository.save(n);
		return "Event Saved";
	}

	@PostMapping("/deleteEventById")
	public @ResponseBody String deleteEvent(@RequestParam String id){
		eventRepository.deleteById(Integer.parseInt(id));
		return "Event Deleted";
	}

	@GetMapping("/allEvents")
	public @ResponseBody Iterable<Event> getAllEvents(){
		return eventRepository.findAll();
	}

	@GetMapping("/eventById")
	public @ResponseBody Optional<Event> getEventById(@RequestParam String id){
		return eventRepository.findById(Integer.parseInt(id));
	}

	/*
	------------------------------------------------------------
	UserEvent Repository Interactions
	This repository holds information about which users are associated
	with which events
	------------------------------------------------------------
	 */

	@Autowired
	private UserEventMapRepository userEventRepository;

	@PostMapping("/addUserEvent")
	public @ResponseBody String addUserEventInteraction(@RequestParam String userId,
														@RequestParam String eventId,
														@RequestParam String isOrganizer){
		UserEvent ue = new UserEvent();
		ue.setUserId(Integer.parseInt(userId));
		ue.setEventId(Integer.parseInt(eventId));
		ue.setOrganizer(Boolean.parseBoolean(isOrganizer));

		userEventRepository.save(ue);
		return "User/Event Mapping Saved";
	}

	@PostMapping("/deleteUserEventById")
	public @ResponseBody String deleteUserEventInteraction(@RequestParam String id){
		userEventRepository.deleteById(Integer.parseInt(id));
		return "User/Event Mapping Deleted";
	}

	@GetMapping("/allUserEvents")
	public @ResponseBody Iterable<UserEvent> getAllUserEvents(){
		return userEventRepository.findAll();
	}

	@GetMapping("/userEventById")
	public @ResponseBody Optional<UserEvent> getUserEventById(@RequestParam String id){
		return userEventRepository.findById(Integer.parseInt(id));
	}

}
