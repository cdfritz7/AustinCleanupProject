{"ast":null,"code":"var _jsxFileName = \"/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { Container, Row, Col, ListGroup, Modal, Button } from 'react-bootstrap/';\nimport AddEventComponent from './AddEventComponent.js';\nimport './css/MapPage.css';\n\nclass EventList extends Component {\n  render() {\n    var event_list = this.props.events.map(my_event => React.createElement(ListGroup.Item, {\n      key: my_event.id.toString(),\n      eventKey: my_event.id.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, my_event.name));\n    console.log(this.props.events);\n    console.log(event_list);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, event_list));\n  }\n\n}\n\nclass EventMarkerSmall extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \" \", this.props.name, \" \");\n  }\n\n}\n\nclass SimpleMap extends Component {\n  render() {\n    //create list of markers based on passed in events\n    var marker_list = this.props.events.map(my_event => React.createElement(EventMarkerSmall, {\n      key: my_event.id.toString(),\n      lat: my_event.latitude,\n      lng: my_event.longitude,\n      name: my_event.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n    return (//always set container height explicitly, required by google maps\n      React.createElement(\"div\", {\n        style: {\n          height: '75vh',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(GoogleMapReact //we need to get a google maps api key to use full functionality\n      //bootstrapURLKeys={{key:/*your key here8\n      , {\n        defaultCenter: this.props.dcenter,\n        defaultZoom: this.props.zoom,\n        center: this.props.center,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, marker_list))\n    );\n  }\n\n}\n\nSimpleMap.defaultProps = {\n  dcenter: {\n    lat: 0.0,\n    lng: 0.0\n  },\n  zoom: 10\n};\n\nclass MapPage extends Component {\n  constructor(props) {\n    super(props);\n    const handle = this.props.match.params.latlong;\n    let floatLat;\n    let floatLng;\n\n    if (handle) {\n      var latlong = handle.split(\"_\");\n      floatLat = parseFloat(latlong[0]);\n      floatLng = parseFloat(latlong[1]);\n    } else {\n      //austin lat long\n      floatLat = 30.27;\n      floatLng = -97.74;\n    }\n\n    this.state = {\n      latitude: 0.0,\n      longitude: 0.0,\n      events: [],\n      showAddEventModal: false\n    };\n    this.resetEvents = this.resetEvents.bind(this);\n    this.resetEvents(floatLat, floatLng);\n  } //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n\n\n  resetEvents(latitude, longitude) {\n    fetch(\"http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=\".concat(latitude, \"&lng=\").concat(longitude)).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Error in MapPage.js resetEvents, Network response not okay');\n      }\n    }).then(json => {\n      this.setState({\n        events: json,\n        latitude: latitude,\n        longitude: longitude\n      });\n    });\n  }\n\n  render() {\n    console.log('-------');\n    console.log(this.state.events);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(EventList, {\n      events: this.state.events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(Col, {\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(SimpleMap, {\n      center: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      events: this.state.events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: () => {\n        this.setState({\n          showAddEventModal: true\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Add Event\"), React.createElement(Modal, {\n      show: this.state.showAddEventModal,\n      onHide: () => {\n        this.setState({\n          showAddEventModal: false\n        });\n        this.resetEvents(this.state.latitude, this.state.longitude);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Add Event\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(AddEventComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nexport default MapPage;","map":{"version":3,"sources":["/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js"],"names":["React","Component","GoogleMapReact","Container","Row","Col","ListGroup","Modal","Button","AddEventComponent","EventList","render","event_list","props","events","map","my_event","id","toString","name","console","log","EventMarkerSmall","constructor","SimpleMap","marker_list","latitude","longitude","height","width","dcenter","zoom","center","defaultProps","lat","lng","MapPage","handle","match","params","latlong","floatLat","floatLng","split","parseFloat","state","showAddEventModal","resetEvents","bind","fetch","then","response","ok","json","Error","setState"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport {Container,\n        Row,\n        Col,\n        ListGroup,\n        Modal,\n        Button} from 'react-bootstrap/';\n\nimport AddEventComponent from './AddEventComponent.js';\nimport './css/MapPage.css';\n\nclass EventList extends Component {\n  render(){\n\n    var event_list = this.props.events.map(my_event =>\n    <ListGroup.Item key={my_event.id.toString()} eventKey={my_event.id.toString()}>\n    {my_event.name}\n    </ListGroup.Item>\n    )\n\n    console.log(this.props.events);\n    console.log(event_list);\n\n    return (\n      <div>\n        <ListGroup>\n          {event_list}\n        </ListGroup>\n      </div>\n    )\n  }\n}\n\nclass EventMarkerSmall extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return <h3> {this.props.name} </h3>\n  }\n}\n\nclass SimpleMap extends Component {\n  static defaultProps = {\n    dcenter: {\n      lat:0.0,\n      lng:0.0\n    },\n    zoom: 10\n  };\n\n  render() {\n    //create list of markers based on passed in events\n    var marker_list = this.props.events.map(my_event =>\n    <EventMarkerSmall key={my_event.id.toString()}\n                      lat={my_event.latitude}\n                      lng={my_event.longitude}\n                      name={my_event.name} />);\n\n    return (\n      //always set container height explicitly, required by google maps\n      <div style={{height: '75vh', width: '100%'}}>\n        <GoogleMapReact\n          //we need to get a google maps api key to use full functionality\n          //bootstrapURLKeys={{key:/*your key here8\n          defaultCenter={this.props.dcenter}\n          defaultZoom={this.props.zoom}\n          center={this.props.center}\n        >\n          {marker_list}\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nclass MapPage extends Component {\n\n  constructor(props){\n    super(props);\n\n    const handle = this.props.match.params.latlong;\n\n    let floatLat;\n    let floatLng;\n\n    if(handle){\n        var latlong = handle.split(\"_\")\n        floatLat = parseFloat(latlong[0]);\n        floatLng = parseFloat(latlong[1]);\n    }else{\n       //austin lat long\n       floatLat = 30.27;\n       floatLng = -97.74;\n    }\n\n    this.state = {\n                  latitude:0.0,\n                  longitude:0.0,\n                  events:[],\n                  showAddEventModal:false\n                  };\n\n    this.resetEvents = this.resetEvents.bind(this);\n    this.resetEvents(floatLat, floatLng);\n  }\n\n  //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n  resetEvents(latitude, longitude){\n    fetch(`http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=${latitude}&lng=${longitude}`)\n    .then(function(response){\n      if(response.ok){\n        return response.json();\n      }else{\n        throw new Error('Error in MapPage.js resetEvents, Network response not okay')\n      }\n    }).then(json => {\n      this.setState({events:json, latitude:latitude, longitude:longitude})\n    });\n  }\n\n  render(){\n    console.log('-------');\n    console.log(this.state.events);\n\n    return(\n      <div>\n        <Container className='centered'>\n          <Row>\n            <Col xs={4}>\n              <EventList events={this.state.events} />\n            </Col>\n            <Col xs={8}>\n              <SimpleMap center={{lat:this.state.latitude,\n                                  lng:this.state.longitude}}\n                         events={this.state.events}/>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs={12}>\n              <Button variant=\"primary\"\n                      onClick={()=>{this.setState({showAddEventModal:true})}}>\n                Add Event\n              </Button>\n              <Modal show={this.state.showAddEventModal}\n                     onHide={()=>{\n                                  this.setState({showAddEventModal:false});\n                                  this.resetEvents(this.state.latitude, this.state.longitude);\n                                  }}>\n                <Modal.Header closeButton>\n                  <Modal.Title>Add Event</Modal.Title>\n                </Modal.Header>\n                <Modal.Body><AddEventComponent /></Modal.Body>\n              </Modal>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n    )\n\n  }\n}\n\nexport default MapPage;\n"]},"metadata":{},"sourceType":"module"}