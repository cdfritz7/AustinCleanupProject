{"ast":null,"code":"var _jsxFileName = \"/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { Container, Row, Col, ListGroup, Modal, Button } from 'react-bootstrap/';\nimport AddEventComponent from './AddEventComponent.js';\nimport './css/MapPage.css';\n\nclass EventList extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const event_list = this.props.events.map(event => React.createElement(ListGroup.Item, {\n      eventKey: event.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, event.name));\n    console.log(this.props.events);\n    console.log(event_list);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, event_list));\n  }\n\n}\n\nclass EventMarkerSmall extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \" \", this.props.name, \" \");\n  }\n\n}\n\nclass SimpleMap extends Component {\n  render() {\n    //create list of markers based on passed in events\n    var marker_list = this.props.events.map(my_event => React.createElement(EventMarkerSmall, {\n      lat: my_event.latitude,\n      lng: my_event.longitude,\n      name: my_event.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n    return (//always set container height explicitly, required by google maps\n      React.createElement(\"div\", {\n        style: {\n          height: '75vh',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(GoogleMapReact //we need to get a google maps api key to use full functionality\n      //bootstrapURLKeys={{key:/*your key here8\n      , {\n        defaultCenter: this.props.dcenter,\n        defaultZoom: this.props.zoom,\n        center: this.props.center,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, marker_list))\n    );\n  }\n\n}\n\nSimpleMap.defaultProps = {\n  dcenter: {\n    lat: 0.0,\n    lng: 0.0\n  },\n  zoom: 10\n};\n\nclass MapPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: props.latitude,\n      longitude: props.longitude,\n      events: props.events\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.resetEvents = this.resetEvents.bind(this);\n  } //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n\n\n  resetEvents(latitude, longitude) {\n    fetch(\"http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=\".concat(latitude, \"&lng=\").concat(longitude)).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Error in MapPage.js resetEvents, Network response not okay');\n      }\n    }).then(json => {\n      this.setState({\n        events: json\n      });\n    });\n  }\n\n  componentDidMount() {\n    //this param made in Main.js when setting up routes\n    const handle = this.props.match.params.latlong;\n    var floatLat = 30.27;\n    var floatLng = -97.74;\n\n    if (handle) {\n      var latlong = handle.split(\"_\");\n      var floatLat = parseFloat(latlong[0]);\n      var floatLng = parseFloat(latlong[1]);\n    }\n\n    fetch(\"http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=\".concat(floatLat, \"&lng=\").concat(floatLng)).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Error in MapPage.js componentDidMount, Network response not okay');\n      }\n    }).then(json => {\n      this.setState({\n        events: json\n      });\n    });\n    this.setState({\n      latitude: floatLat,\n      longitude: floatLng\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(EventList, {\n      events: this.state.events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(SimpleMap, {\n      center: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      events: this.state.events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: () => {\n        this.setState({\n          showAddEventModal: true\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Add Event\"), React.createElement(Modal, {\n      show: this.state.showAddEventModal,\n      onHide: () => {\n        this.setState({\n          showAddEventModal: false\n        });\n        this.resetEvents(this.state.latitude, this.state.longitude);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Add Event\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(AddEventComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nMapPage.defaultProps = {\n  latitude: 0.0,\n  longitude: 0.0,\n  showAddEventModal: false,\n  events: []\n};\nexport default MapPage;","map":{"version":3,"sources":["/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js"],"names":["React","Component","GoogleMapReact","Container","Row","Col","ListGroup","Modal","Button","AddEventComponent","EventList","constructor","props","render","event_list","events","map","event","name","console","log","EventMarkerSmall","SimpleMap","marker_list","my_event","latitude","longitude","height","width","dcenter","zoom","center","defaultProps","lat","lng","MapPage","state","componentDidMount","bind","resetEvents","fetch","then","response","ok","json","Error","setState","handle","match","params","latlong","floatLat","floatLng","split","parseFloat","showAddEventModal"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport {Container,\n        Row,\n        Col,\n        ListGroup,\n        Modal,\n        Button} from 'react-bootstrap/';\n\nimport AddEventComponent from './AddEventComponent.js';\nimport './css/MapPage.css';\n\nclass EventList extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n\n    const event_list = this.props.events.map((event) => \n    <ListGroup.Item eventKey={event.name}>{event.name}</ListGroup.Item>)\n\n    console.log(this.props.events);\n    console.log(event_list);\n\n    return (\n      <div>\n        <ListGroup>\n          {event_list}\n        </ListGroup>\n      </div>\n    )\n  }\n}\n\nclass EventMarkerSmall extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return <h3> {this.props.name} </h3>\n  }\n}\n\nclass SimpleMap extends Component {\n  static defaultProps = {\n    dcenter: {\n      lat:0.0,\n      lng:0.0\n    },\n    zoom: 10\n  };\n\n  render() {\n    //create list of markers based on passed in events\n    var marker_list = this.props.events.map(my_event => <EventMarkerSmall lat={my_event.latitude}\n                      lng={my_event.longitude}\n                      name={my_event.name} />);\n\n    return (\n      //always set container height explicitly, required by google maps\n      <div style={{height: '75vh', width: '100%'}}>\n        <GoogleMapReact\n          //we need to get a google maps api key to use full functionality\n          //bootstrapURLKeys={{key:/*your key here8\n          defaultCenter={this.props.dcenter}\n          defaultZoom={this.props.zoom}\n          center={this.props.center}\n        >\n          {marker_list}\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nclass MapPage extends Component {\n  static defaultProps = {\n    latitude: 0.0,\n    longitude: 0.0,\n    showAddEventModal: false,\n    events:[]\n  };\n\n  constructor(props){\n    super(props);\n    this.state = {latitude:props.latitude,\n                  longitude:props.longitude,\n                  events:props.events};\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.resetEvents = this.resetEvents.bind(this);\n  }\n\n  //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n  resetEvents(latitude, longitude){\n    fetch(`http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=${latitude}&lng=${longitude}`)\n    .then(function(response){\n      if(response.ok){\n        return response.json();\n      }else{\n        throw new Error('Error in MapPage.js resetEvents, Network response not okay')\n      }\n    }).then(json => {\n      this.setState({events:json})});\n  }\n\n  componentDidMount(){\n      //this param made in Main.js when setting up routes\n      const handle = this.props.match.params.latlong;\n      var floatLat = 30.27;\n      var floatLng = -97.74;\n\n      if(handle){\n          var latlong = handle.split(\"_\")\n          var floatLat = parseFloat(latlong[0]);\n          var floatLng = parseFloat(latlong[1]);\n      }\n\n      fetch(`http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=${floatLat}&lng=${floatLng}`)\n      .then(function(response){\n        if(response.ok){\n          return response.json();\n        }else{\n          throw new Error('Error in MapPage.js componentDidMount, Network response not okay')\n        }\n      }).then(json => {\n        this.setState({events:json})\n      });\n\n      this.setState({latitude:floatLat, longitude:floatLng});\n  }\n\n\n  render(){\n\n\n    return(\n      <div>\n        <Container className='centered'>\n          <Row>\n            <Col xs={4}>\n              <ListGroup>\n                <EventList events={this.state.events} />\n              </ListGroup>\n            </Col>\n            <Col xs={8}>\n              <SimpleMap center={{lat:this.state.latitude,\n                                  lng:this.state.longitude}}\n                         events={this.state.events}/>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12}>\n              <Button variant=\"primary\"\n                      onClick={()=>{this.setState({showAddEventModal:true})}}>\n                Add Event\n              </Button>\n              <Modal show={this.state.showAddEventModal}\n                     onHide={()=>{\n                                  this.setState({showAddEventModal:false});\n                                  this.resetEvents(this.state.latitude, this.state.longitude);\n                                  }}>\n                <Modal.Header closeButton>\n                  <Modal.Title>Add Event</Modal.Title>\n                </Modal.Header>\n                <Modal.Body><AddEventComponent /></Modal.Body>\n              </Modal>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n    )\n\n  }\n}\n\nexport default MapPage;\n"]},"metadata":{},"sourceType":"module"}