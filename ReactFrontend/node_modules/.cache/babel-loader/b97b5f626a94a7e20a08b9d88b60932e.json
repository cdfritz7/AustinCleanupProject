{"ast":null,"code":"var _jsxFileName = \"/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { Container, Row, Col, ListGroup } from 'react-bootstrap/';\nimport './css/MapPage.css';\n\nclass EventMarkerSmall extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \" \", this.props.event.name, \" \");\n  }\n\n}\n\nclass SimpleMap extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    {\n      console.log(this.props.center);\n    }\n    return (//always set container height explicitly, required by google maps\n      React.createElement(\"div\", {\n        style: {\n          height: '65vh',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(GoogleMapReact //we need to get a google maps api key to use full functionality\n      //bootstrapURLKeys={{key:/*your key here*/}}\n      , {\n        center: this.props.center,\n        defaultZoom: 11,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }))\n    );\n  }\n\n}\n\nSimpleMap.defaultProps = {\n  center: {\n    lat: 30.27,\n    long: -97.74\n  },\n  zoom: 11\n};\n\nclass MapPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: props.latitude,\n      longitude: props.longitude,\n      events: props.events\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.resetEvents = this.resetEvents.bind(this);\n  } //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n\n\n  resetEvents(latitude, longitude) {\n    this.setState({\n      events: []\n    });\n  }\n\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n\n    if (handle) {\n      var latlong = handle.split(\"_\");\n      this.setState({\n        latitude: parseInt(latlong[0]),\n        longitude: parseInt(latlong[1])\n      });\n    } else {\n      this.setState({\n        latitude: 30.27,\n        longitude: -97.74\n      });\n    }\n\n    this.resetEvents(this.state.latitude, this.state.longitude);\n  }\n\n  render() {\n    var event_list = [];\n\n    for (let i = 0; i < this.state.events.length; i++) {\n      event_list.push(React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.state.events[0].name));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, event_list, React.createElement(ListGroup.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"asdf\"), React.createElement(ListGroup.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"asdf\"), React.createElement(ListGroup.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"asdf\"), React.createElement(ListGroup.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"asdf\"))), React.createElement(Col, {\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(SimpleMap, {\n      center: {\n        lat: this.state.latitude,\n        long: this.state.longitude\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nMapPage.defaultProps = {\n  latitude: 0.0,\n  longitude: 0.0,\n  events: []\n};\nexport default MapPage;","map":{"version":3,"sources":["/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js"],"names":["React","Component","GoogleMapReact","Container","Row","Col","ListGroup","EventMarkerSmall","constructor","props","render","event","name","SimpleMap","console","log","center","height","width","defaultProps","lat","long","zoom","MapPage","state","latitude","longitude","events","componentDidMount","bind","resetEvents","setState","handle","match","params","latlong","split","parseInt","event_list","i","length","push"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport {Container,\n        Row,\n        Col,\n        ListGroup} from 'react-bootstrap/';\nimport './css/MapPage.css';\n\nclass EventMarkerSmall extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return <h1> {this.props.event.name} </h1>\n  }\n}\n\nclass SimpleMap extends Component {\n    static defaultProps = {\n      center: {\n        lat:30.27,\n        long:-97.74\n      },\n      zoom: 11\n    };\n\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n\n    {console.log(this.props.center);}\n    return (\n      //always set container height explicitly, required by google maps\n      <div style={{height: '65vh', width: '100%'}}>\n        <GoogleMapReact\n          //we need to get a google maps api key to use full functionality\n          //bootstrapURLKeys={{key:/*your key here*/}}\n          center={this.props.center}\n          defaultZoom={11}\n        >\n\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nclass MapPage extends Component {\n  static defaultProps = {\n    latitude: 0.0,\n    longitude: 0.0,\n    events:[]\n  };\n\n  constructor(props){\n    super(props);\n    this.state = {latitude:props.latitude,\n                  longitude:props.longitude,\n                  events:props.events};\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.resetEvents = this.resetEvents.bind(this);\n  }\n\n  //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n  resetEvents(latitude, longitude){\n    this.setState({events:[]})\n  }\n\n  componentDidMount(){\n      const {handle} = this.props.match.params;\n      if(handle){\n          var latlong = handle.split(\"_\")\n          this.setState({latitude:parseInt(latlong[0]), longitude:parseInt(latlong[1])});\n      }else{\n          this.setState({latitude:30.27, longitude:-97.74});\n      }\n      this.resetEvents(this.state.latitude, this.state.longitude);\n  }\n\n\n\n  render(){\n    var event_list = []\n\n    for(let i = 0; i < this.state.events.length; i++){\n      event_list.push(<ListGroup.Item>{this.state.events[0].name}</ListGroup.Item>)\n    }\n\n    return(\n      <div>\n        <Container className='centered'>\n          <Row>\n            <Col xs={6}>\n              <ListGroup>\n                {event_list}\n                <ListGroup.Item>asdf</ListGroup.Item>\n                <ListGroup.Item>asdf</ListGroup.Item>\n                <ListGroup.Item>asdf</ListGroup.Item>\n                <ListGroup.Item>asdf</ListGroup.Item>\n              </ListGroup>\n            </Col>\n            <Col xs={6}>\n              <SimpleMap center={{lat:this.state.latitude, long:this.state.longitude}}/>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n    )\n\n  }\n}\n\nexport default MapPage;\n"]},"metadata":{},"sourceType":"module"}