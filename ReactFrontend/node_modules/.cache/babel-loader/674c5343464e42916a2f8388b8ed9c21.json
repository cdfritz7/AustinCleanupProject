{"ast":null,"code":"var _jsxFileName = \"/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { Container, Row, Col, ListGroup } from 'react-bootstrap/';\nimport './css/MapPage.css';\n\nclass EventMarkerSmall extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \" \", this.props.event.name, \" \");\n  }\n\n}\n\nclass SimpleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.setState({\n      lat: props.center.lat,\n      lng: props.center.lng,\n      events: props.events\n    });\n  }\n\n  render() {\n    return (//always set container height explicitly, required by google maps\n      React.createElement(\"div\", {\n        style: {\n          height: '65vh',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(GoogleMapReact //we need to get a google maps api key to use full functionality\n      //bootstrapURLKeys={{key:/*your key here*/}}\n      , {\n        defaultCenter: this.props.center,\n        defaultZoom: this.props.zoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }))\n    );\n  }\n\n}\n\nSimpleMap.defaultProps = {\n  center: {\n    lat: 58.95,\n    lng: 30.33\n  },\n  zoom: 11\n};\n\nclass MapPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: props.latitude,\n      longitude: props.longitude,\n      events: props.events\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.resetEvents = this.resetEvents.bind(this);\n  } //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n\n\n  resetEvents(latitude, longitude) {\n    this.setState({\n      events: []\n    });\n  }\n\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n\n    if (handle) {\n      var latlong = handle.split(\"_\");\n      this.setState({\n        latitude: latlong[0],\n        longitude: latlong[1]\n      });\n      this.resetEvents(latlong[0], latlong[1]);\n    }\n  }\n\n  render() {\n    var event_list = [];\n\n    for (let i = 0; i < this.state.events.length; i++) {\n      event_list.push(React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.state.events[0].name));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, event_list)), React.createElement(Col, {\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(SimpleMap, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nMapPage.defaultProps = {\n  latitude: 0.0,\n  longitude: 0.0,\n  events: []\n};\nexport default MapPage;","map":{"version":3,"sources":["/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js"],"names":["React","Component","GoogleMapReact","Container","Row","Col","ListGroup","EventMarkerSmall","constructor","props","render","event","name","SimpleMap","setState","lat","center","lng","events","height","width","zoom","defaultProps","MapPage","state","latitude","longitude","componentDidMount","bind","resetEvents","handle","match","params","latlong","split","event_list","i","length","push"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport {Container,\n        Row,\n        Col,\n        ListGroup} from 'react-bootstrap/';\nimport './css/MapPage.css';\n\nclass EventMarkerSmall extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return <h1> {this.props.event.name} </h1>\n  }\n}\n\nclass SimpleMap extends Component {\n  static defaultProps = {\n    center: {\n      lat: 58.95,\n      lng: 30.33\n    },\n    zoom: 11\n  };\n\n  constructor(props){\n    super(props);\n    this.setState({lat:props.center.lat, lng:props.center.lng, events:props.events});\n  }\n\n  render() {\n    return (\n      //always set container height explicitly, required by google maps\n      <div style={{height: '65vh', width: '100%'}}>\n        <GoogleMapReact\n          //we need to get a google maps api key to use full functionality\n          //bootstrapURLKeys={{key:/*your key here*/}}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n        >\n\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nclass MapPage extends Component {\n  static defaultProps = {\n    latitude: 0.0,\n    longitude: 0.0,\n    events:[]\n  };\n\n  constructor(props){\n    super(props);\n    this.state = {latitude:props.latitude,\n                  longitude:props.longitude,\n                  events:props.events};\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.resetEvents = this.resetEvents.bind(this);\n  }\n\n  //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n  resetEvents(latitude, longitude){\n    this.setState({events:[]})\n  }\n\n  componentDidMount(){\n      const {handle} = this.props.match.params;\n      if(handle){\n          var latlong = handle.split(\"_\")\n          this.setState({latitude:latlong[0], longitude:latlong[1]});\n          this.resetEvents(latlong[0], latlong[1])\n      }\n  }\n\n\n\n  render(){\n    var event_list = []\n\n    for(let i = 0; i < this.state.events.length; i++){\n      event_list.push(<ListGroup.Item>{this.state.events[0].name}</ListGroup.Item>)\n    }\n\n    return(\n      <div>\n        <Container className='centered'>\n          <Row>\n            <Col xs={6}>\n              <ListGroup>\n                {event_list}\n              </ListGroup>\n            </Col>\n            <Col xs={6}>\n              <SimpleMap />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n    )\n\n  }\n}\n\nexport default MapPage;\n"]},"metadata":{},"sourceType":"module"}