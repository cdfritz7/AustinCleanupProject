{"ast":null,"code":"var _jsxFileName = \"/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { Container, Row, Col, ListGroup } from 'react-bootstrap/';\nimport './css/MapPage.css';\n\nclass EventMarkerSmall extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \" \", this.props.name, \" \");\n  }\n\n}\n\nclass SimpleMap extends Component {\n  render() {\n    //create list of markers based on passed in events\n    var marker_list = this.props.events.map(my_event => React.createElement(EventMarkerSmall, {\n      lat: my_event.latitude,\n      lng: my_event.longitude,\n      name: my_event.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n    return (//always set container height explicitly, required by google maps\n      React.createElement(\"div\", {\n        style: {\n          height: '75vh',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(GoogleMapReact //we need to get a google maps api key to use full functionality\n      //bootstrapURLKeys={{key:/*your key here8\n      , {\n        defaultCenter: this.props.dcenter,\n        defaultZoom: this.props.zoom,\n        center: this.props.center,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, marker_list))\n    );\n  }\n\n}\n\nSimpleMap.defaultProps = {\n  dcenter: {\n    lat: 0.0,\n    lng: 0.0\n  },\n  zoom: 10\n};\n\nclass MapPage extends Component {\n  constructor(props) {\n    console.log('constructor');\n    super(props);\n    this.state = {\n      latitude: props.latitude,\n      longitude: props.longitude,\n      events: props.events\n    };\n    this.resetEvents = this.resetEvents.bind(this);\n    const handle = this.props.match.params.latlong;\n    var floatLat = 30.27;\n    var floatLng = -97.74;\n\n    if (handle) {\n      console.log(handle);\n      var latlong = handle.split(\"_\");\n      floatLat = parseFloat(latlong[0]);\n      floatLng = parseFloat(latlong[1]);\n    }\n\n    fetch(\"http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=\".concat(floatLat, \"&lng=\").concat(floatLng)).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Error in MapPage.js resetEvents, Network response not okay');\n      }\n    }).then(json => {\n      console.log(json);\n      this.setState({\n        events: json\n      });\n    });\n    this.setState({\n      latitude: floatLat,\n      longitude: floatLng\n    });\n  } //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n\n\n  resetEvents(latitude, longitude) {\n    console.log('reset');\n    console.log(this.state.latitude);\n    console.log(this.state.longitude);\n    fetch(\"http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=\".concat(latitude, \"&lng=\").concat(longitude)).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Error in MapPage.js resetEvents, Network response not okay');\n      }\n    }).then(json => {\n      console.log(json);\n      this.setState({\n        events: json\n      });\n    });\n  }\n\n  render() {\n    var event_list = [];\n    console.log('render');\n    console.log(this.state.latitude);\n    console.log(this.state.longitude);\n\n    for (let i = 0; i < this.state.events.length; i++) {\n      event_list.push(React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.state.events[i].name));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, event_list)), React.createElement(Col, {\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(SimpleMap, {\n      center: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      events: this.state.events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nMapPage.defaultProps = {\n  latitude: 0.0,\n  longitude: 0.0,\n  events: []\n};\nexport default MapPage;","map":{"version":3,"sources":["/home/fritz/Projects/austincleanup/ReactFrontend/austincleanup/src/MapPage.js"],"names":["React","Component","GoogleMapReact","Container","Row","Col","ListGroup","EventMarkerSmall","constructor","props","render","name","SimpleMap","marker_list","events","map","my_event","latitude","longitude","height","width","dcenter","zoom","center","defaultProps","lat","lng","MapPage","console","log","state","resetEvents","bind","handle","match","params","latlong","floatLat","floatLng","split","parseFloat","fetch","then","response","ok","json","Error","setState","event_list","i","length","push"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport {Container,\n        Row,\n        Col,\n        ListGroup} from 'react-bootstrap/';\nimport './css/MapPage.css';\n\nclass EventMarkerSmall extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return <h3> {this.props.name} </h3>\n  }\n}\n\nclass SimpleMap extends Component {\n    static defaultProps = {\n      dcenter: {\n        lat:0.0,\n        lng:0.0\n      },\n      zoom: 10\n    };\n\n  render() {\n\n    //create list of markers based on passed in events\n    var marker_list = this.props.events.map(my_event => <EventMarkerSmall lat={my_event.latitude}\n                      lng={my_event.longitude}\n                      name={my_event.name} />);\n\n    return (\n      //always set container height explicitly, required by google maps\n      <div style={{height: '75vh', width: '100%'}}>\n        <GoogleMapReact\n          //we need to get a google maps api key to use full functionality\n          //bootstrapURLKeys={{key:/*your key here8\n          defaultCenter={this.props.dcenter}\n          defaultZoom={this.props.zoom}\n          center={this.props.center}\n        >\n          {marker_list}\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nclass MapPage extends Component {\n  static defaultProps = {\n    latitude: 0.0,\n    longitude: 0.0,\n    events:[]\n  };\n\n  constructor(props){\n    console.log('constructor');\n    super(props);\n    this.state = {latitude:props.latitude,\n                  longitude:props.longitude,\n                  events:props.events};\n    this.resetEvents = this.resetEvents.bind(this);\n\n    const handle = this.props.match.params.latlong;\n    var floatLat = 30.27;\n    var floatLng = -97.74\n\n    if(handle){\n        console.log(handle);\n        var latlong = handle.split(\"_\")\n        floatLat = parseFloat(latlong[0]);\n        floatLng = parseFloat(latlong[1]);\n    }\n\n    fetch(`http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=${floatLat}&lng=${floatLng}`)\n    .then(function(response){\n      if(response.ok){\n        return response.json();\n      }else{\n        throw new Error('Error in MapPage.js resetEvents, Network response not okay')\n      }\n    }).then(json => {\n      console.log(json);\n      this.setState({events:json});\n    });\n\n    this.setState({latitude:floatLat, longitude:floatLng});\n  }\n\n  //called to reset our event list, used initially when component mounts\n  //or when a search is performed\n  //will be done by making an API call, right now just returns all events\n  resetEvents(latitude, longitude){\n    console.log('reset');\n    console.log(this.state.latitude);\n    console.log(this.state.longitude);\n    fetch(`http://localhost:8080/austinCleanupAPI/eventsByLatLong?lat=${latitude}&lng=${longitude}`)\n    .then(function(response){\n      if(response.ok){\n        return response.json();\n      }else{\n        throw new Error('Error in MapPage.js resetEvents, Network response not okay')\n      }\n    }).then(json => {\n      console.log(json);\n      this.setState({events:json})});\n  }\n\n  render(){\n    var event_list = []\n\n    console.log('render');\n    console.log(this.state.latitude);\n    console.log(this.state.longitude);\n\n    for(let i = 0; i < this.state.events.length; i++){\n      event_list.push(<ListGroup.Item>{this.state.events[i].name}</ListGroup.Item>)\n    }\n\n    return(\n      <div>\n        <Container className='centered'>\n          <Row>\n            <Col xs={4}>\n              <ListGroup>\n                {event_list}\n              </ListGroup>\n            </Col>\n            <Col xs={8}>\n              <SimpleMap center={{lat:this.state.latitude, lng:this.state.longitude}} events={this.state.events}/>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n    )\n\n  }\n}\n\nexport default MapPage;\n"]},"metadata":{},"sourceType":"module"}